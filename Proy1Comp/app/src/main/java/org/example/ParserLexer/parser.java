
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example.ParserLexer;

import java_cup.runtime.*;
import org.example.ErrorHandler;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Map;
import java.util.List;
import java.util.HashSet;
import GeneracionDestino.codigoDestino;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\002\000\002\004\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\057\004\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\004\000\002\005\004\000\002\060\002\000\002\061\002" +
    "\000\002\055\013\000\002\025\005\000\002\025\003\000" +
    "\002\025\002\000\002\026\004\000\002\062\002\000\002" +
    "\006\007\000\002\007\005\000\002\010\004\000\002\010" +
    "\002\000\002\011\003\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\003\000\002" +
    "\011\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\063\002\000\002\064\002" +
    "\000\002\033\013\000\002\065\002\000\002\066\002\000" +
    "\002\034\012\000\002\034\002\000\002\067\002\000\002" +
    "\035\005\000\002\035\002\000\002\070\002\000\002\036" +
    "\012\000\002\071\002\000\002\072\002\000\002\073\002" +
    "\000\002\037\016\000\002\031\003\000\002\031\003\000" +
    "\002\045\003\000\002\045\003\000\002\074\002\000\002" +
    "\040\013\000\002\041\004\000\002\041\002\000\002\042" +
    "\006\000\002\043\003\000\002\032\005\000\002\032\002" +
    "\000\002\046\005\000\002\046\011\000\002\046\007\000" +
    "\002\047\007\000\002\044\004\000\002\044\002\000\002" +
    "\050\005\000\002\050\005\000\002\016\003\000\002\016" +
    "\003\000\002\013\005\000\002\013\003\000\002\013\004" +
    "\000\002\020\003\000\002\020\003\000\002\014\005\000" +
    "\002\014\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\012\005\000\002\012\003\000\002\012\003" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\023\004\000\002\023\004\000\002\023\004" +
    "\000\002\056\003\000\002\056\003\000\002\024\006\000" +
    "\002\024\010\000\002\051\006\000\002\027\005\000\002" +
    "\027\003\000\002\027\002\000\002\052\004\000\002\053" +
    "\006\000\002\054\006\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\032\002\ufffe\021\ufffe\022\ufffe\023\ufffe\024" +
    "\ufffe\025\ufffe\035\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe" +
    "\076\ufffe\001\002\000\032\002\000\021\022\022\013\023" +
    "\020\024\010\025\021\035\015\040\011\041\017\042\027" +
    "\043\025\076\024\001\002\000\004\002\006\001\002\000" +
    "\004\002\001\001\002\000\032\002\ufffc\021\ufffc\022\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\035\ufffc\040\ufffc\041\ufffc\042" +
    "\ufffc\043\ufffc\076\ufffc\001\002\000\020\024\010\025\021" +
    "\035\015\040\011\041\017\042\027\043\025\001\002\000" +
    "\004\037\ufff6\001\002\000\032\002\ufff9\021\ufff9\022\ufff9" +
    "\023\ufff9\024\ufff9\025\ufff9\035\ufff9\040\ufff9\041\ufff9\042" +
    "\ufff9\043\ufff9\076\ufff9\001\002\000\020\024\010\025\021" +
    "\035\015\040\011\041\017\042\027\043\025\001\002\000" +
    "\004\037\323\001\002\000\004\037\ufff7\001\002\000\032" +
    "\002\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff\035" +
    "\uffff\040\uffff\041\uffff\042\uffff\043\uffff\076\uffff\001\002" +
    "\000\004\037\ufff5\001\002\000\004\072\145\001\002\000" +
    "\020\024\010\025\021\035\015\040\011\041\017\042\027" +
    "\043\025\001\002\000\020\024\010\025\021\035\015\040" +
    "\011\041\017\042\027\043\025\001\002\000\032\002\ufffa" +
    "\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\035\ufffa\040" +
    "\ufffa\041\ufffa\042\ufffa\043\ufffa\076\ufffa\001\002\000\004" +
    "\077\032\001\002\000\004\037\ufff3\001\002\000\004\075" +
    "\031\001\002\000\004\037\ufff4\001\002\000\032\002\ufffb" +
    "\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\035\ufffb\040" +
    "\ufffb\041\ufffb\042\ufffb\043\ufffb\076\ufffb\001\002\000\032" +
    "\002\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\035" +
    "\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\076\ufffd\001\002" +
    "\000\064\002\ufff8\003\ufff8\004\ufff8\007\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8" +
    "\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\035\ufff8\037" +
    "\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\076\ufff8\101\ufff8" +
    "\001\002\000\004\037\034\001\002\000\006\057\035\075" +
    "\uffb5\001\002\000\036\003\057\033\047\034\054\036\062" +
    "\037\043\044\055\045\045\055\042\060\040\061\067\066" +
    "\056\067\063\072\041\104\064\001\002\000\004\075\037" +
    "\001\002\000\032\002\uffb7\021\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\035\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7" +
    "\076\uffb7\001\002\000\022\033\uff93\034\uff93\036\uff93\037" +
    "\uff93\044\uff93\045\uff93\072\uff93\104\uff93\001\002\000\036" +
    "\003\057\033\047\034\054\036\062\037\043\044\055\045" +
    "\045\055\042\060\040\061\067\066\056\067\063\072\041" +
    "\104\064\001\002\000\032\033\047\034\054\036\062\037" +
    "\043\044\055\045\045\060\040\061\067\066\056\067\063" +
    "\072\041\104\064\001\002\000\056\046\uff80\047\uff80\050" +
    "\uff80\051\uff80\052\uff80\053\uff80\054\uff80\056\uff80\060\uff80" +
    "\061\uff80\062\uff80\063\uff80\064\uff80\065\uff80\070\uff80\071" +
    "\uff80\072\126\073\uff80\074\uff80\075\uff80\102\uff80\103\125" +
    "\001\002\000\050\046\113\047\116\050\107\051\114\052" +
    "\121\053\uffaa\054\uffaa\056\105\060\112\061\120\062\115" +
    "\063\110\064\117\065\111\070\uffaa\073\uffaa\074\uffaa\075" +
    "\uffaa\102\uffaa\001\002\000\052\046\uff84\047\uff84\050\uff84" +
    "\051\uff84\052\uff84\053\uff84\054\uff84\056\uff84\060\uff84\061" +
    "\uff84\062\uff84\063\uff84\064\uff84\065\uff84\070\uff84\071\uff84" +
    "\073\uff84\074\uff84\075\uff84\102\uff84\001\002\000\052\046" +
    "\uff81\047\uff81\050\uff81\051\uff81\052\uff81\053\uff81\054\uff81" +
    "\056\uff81\060\uff81\061\uff81\062\uff81\063\uff81\064\uff81\065" +
    "\uff81\070\uff81\071\uff81\073\uff81\074\uff81\075\uff81\102\uff81" +
    "\001\002\000\052\046\uff85\047\uff85\050\uff85\051\uff85\052" +
    "\uff85\053\uff85\054\uff85\056\uff85\060\uff85\061\uff85\062\uff85" +
    "\063\uff85\064\uff85\065\uff85\070\uff85\071\uff85\073\uff85\074" +
    "\uff85\075\uff85\102\uff85\001\002\000\050\046\uff9d\047\uff9d" +
    "\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\056\uff9d\060" +
    "\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\070\uff9d" +
    "\073\uff9d\074\uff9d\075\uff9d\102\uff9d\001\002\000\050\046" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\056\uffa2\060\uffa2\061\uffa2\062\100\063\101\064\077\065" +
    "\uffa2\070\uffa2\073\uffa2\074\uffa2\075\uffa2\102\uffa2\001\002" +
    "\000\052\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82\053" +
    "\uff82\054\uff82\056\uff82\060\uff82\061\uff82\062\uff82\063\uff82" +
    "\064\uff82\065\uff82\070\uff82\071\uff82\073\uff82\074\uff82\075" +
    "\uff82\102\uff82\001\002\000\004\075\uffb6\001\002\000\052" +
    "\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053\uff86\054" +
    "\uff86\056\uff86\060\uff86\061\uff86\062\uff86\063\uff86\064\uff86" +
    "\065\uff86\070\uff86\071\uff86\073\uff86\074\uff86\075\uff86\102" +
    "\uff86\001\002\000\052\046\uff83\047\uff83\050\uff83\051\uff83" +
    "\052\uff83\053\uff83\054\uff83\056\uff83\060\uff83\061\uff83\062" +
    "\uff83\063\uff83\064\uff83\065\uff83\070\uff83\071\uff83\073\uff83" +
    "\074\uff83\075\uff83\102\uff83\001\002\000\004\037\076\001" +
    "\002\000\014\070\uffb1\073\uffb1\074\uffb1\075\uffb1\102\uffb1" +
    "\001\002\000\050\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052" +
    "\uffa1\053\uffa1\054\uffa1\056\uffa1\060\uffa1\061\uffa1\062\uffa1" +
    "\063\uffa1\064\uffa1\065\uffa1\070\uffa1\073\uffa1\074\uffa1\075" +
    "\uffa1\102\uffa1\001\002\000\020\053\uffaf\054\uffaf\070\uffaf" +
    "\073\uffaf\074\uffaf\075\uffaf\102\uffaf\001\002\000\052\046" +
    "\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88" +
    "\056\uff88\060\uff88\061\uff88\062\uff88\063\uff88\064\uff88\065" +
    "\uff88\070\uff88\071\uff88\073\uff88\074\uff88\075\uff88\102\uff88" +
    "\001\002\000\004\037\075\001\002\000\052\046\uff87\047" +
    "\uff87\050\uff87\051\uff87\052\uff87\053\uff87\054\uff87\056\uff87" +
    "\060\uff87\061\uff87\062\uff87\063\uff87\064\uff87\065\uff87\070" +
    "\uff87\071\uff87\073\uff87\074\uff87\075\uff87\102\uff87\001\002" +
    "\000\022\033\047\034\054\036\062\037\043\044\055\045" +
    "\045\072\041\104\064\001\002\000\020\053\071\054\072" +
    "\070\uffb2\073\uffb2\074\uffb2\075\uffb2\102\uffb2\001\002\000" +
    "\022\033\uff92\034\uff92\036\uff92\037\uff92\044\uff92\045\uff92" +
    "\072\uff92\104\uff92\001\002\000\032\033\047\034\054\036" +
    "\062\037\043\044\055\045\045\060\040\061\067\066\056" +
    "\067\063\072\041\104\064\001\002\000\032\033\uffac\034" +
    "\uffac\036\uffac\037\uffac\044\uffac\045\uffac\060\uffac\061\uffac" +
    "\066\uffac\067\uffac\072\uffac\104\uffac\001\002\000\032\033" +
    "\uffad\034\uffad\036\uffad\037\uffad\044\uffad\045\uffad\060\uffad" +
    "\061\uffad\066\uffad\067\uffad\072\uffad\104\uffad\001\002\000" +
    "\020\053\uffb0\054\uffb0\070\uffb0\073\uffb0\074\uffb0\075\uffb0" +
    "\102\uffb0\001\002\000\050\046\uff96\047\uff96\050\uff96\051" +
    "\uff96\052\uff96\053\uff96\054\uff96\056\uff96\060\uff96\061\uff96" +
    "\062\uff96\063\uff96\064\uff96\065\uff96\070\uff96\073\uff96\074" +
    "\uff96\075\uff96\102\uff96\001\002\000\050\046\uff94\047\uff94" +
    "\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\056\uff94\060" +
    "\uff94\061\uff94\062\uff94\063\uff94\064\uff94\065\uff94\070\uff94" +
    "\073\uff94\074\uff94\075\uff94\102\uff94\001\002\000\050\046" +
    "\uff95\047\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95" +
    "\056\uff95\060\uff95\061\uff95\062\uff95\063\uff95\064\uff95\065" +
    "\uff95\070\uff95\073\uff95\074\uff95\075\uff95\102\uff95\001\002" +
    "\000\022\033\047\034\054\036\062\037\043\044\055\045" +
    "\045\072\041\104\064\001\002\000\022\033\047\034\054" +
    "\036\062\037\043\044\055\045\045\072\041\104\064\001" +
    "\002\000\022\033\047\034\054\036\062\037\043\044\055" +
    "\045\045\072\041\104\064\001\002\000\050\046\uff9f\047" +
    "\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\056\uff9f" +
    "\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\070" +
    "\uff9f\073\uff9f\074\uff9f\075\uff9f\102\uff9f\001\002\000\050" +
    "\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054" +
    "\uffa0\056\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0" +
    "\065\uffa0\070\uffa0\073\uffa0\074\uffa0\075\uffa0\102\uffa0\001" +
    "\002\000\050\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e" +
    "\053\uff9e\054\uff9e\056\uff9e\060\uff9e\061\uff9e\062\uff9e\063" +
    "\uff9e\064\uff9e\065\uff9e\070\uff9e\073\uff9e\074\uff9e\075\uff9e" +
    "\102\uff9e\001\002\000\032\033\uffa5\034\uffa5\036\uffa5\037" +
    "\uffa5\044\uffa5\045\uffa5\060\uffa5\061\uffa5\066\uffa5\067\uffa5" +
    "\072\uffa5\104\uffa5\001\002\000\022\033\047\034\054\036" +
    "\062\037\043\044\055\045\045\072\041\104\064\001\002" +
    "\000\032\033\uffa6\034\uffa6\036\uffa6\037\uffa6\044\uffa6\045" +
    "\uffa6\060\uffa6\061\uffa6\066\uffa6\067\uffa6\072\uffa6\104\uffa6" +
    "\001\002\000\022\033\uff99\034\uff99\036\uff99\037\uff99\044" +
    "\uff99\045\uff99\072\uff99\104\uff99\001\002\000\022\033\uff97" +
    "\034\uff97\036\uff97\037\uff97\044\uff97\045\uff97\072\uff97\104" +
    "\uff97\001\002\000\022\033\uff9c\034\uff9c\036\uff9c\037\uff9c" +
    "\044\uff9c\045\uff9c\072\uff9c\104\uff9c\001\002\000\032\033" +
    "\uffa8\034\uffa8\036\uffa8\037\uffa8\044\uffa8\045\uffa8\060\uffa8" +
    "\061\uffa8\066\uffa8\067\uffa8\072\uffa8\104\uffa8\001\002\000" +
    "\032\033\uffa7\034\uffa7\036\uffa7\037\uffa7\044\uffa7\045\uffa7" +
    "\060\uffa7\061\uffa7\066\uffa7\067\uffa7\072\uffa7\104\uffa7\001" +
    "\002\000\022\033\uff9a\034\uff9a\036\uff9a\037\uff9a\044\uff9a" +
    "\045\uff9a\072\uff9a\104\uff9a\001\002\000\032\033\uffa9\034" +
    "\uffa9\036\uffa9\037\uffa9\044\uffa9\045\uffa9\060\uffa9\061\uffa9" +
    "\066\uffa9\067\uffa9\072\uffa9\104\uffa9\001\002\000\022\033" +
    "\uff98\034\uff98\036\uff98\037\uff98\044\uff98\045\uff98\072\uff98" +
    "\104\uff98\001\002\000\022\033\uff9b\034\uff9b\036\uff9b\037" +
    "\uff9b\044\uff9b\045\uff9b\072\uff9b\104\uff9b\001\002\000\032" +
    "\033\uffa4\034\uffa4\036\uffa4\037\uffa4\044\uffa4\045\uffa4\060" +
    "\uffa4\061\uffa4\066\uffa4\067\uffa4\072\uffa4\104\uffa4\001\002" +
    "\000\032\033\047\034\054\036\062\037\043\044\055\045" +
    "\045\060\040\061\067\066\056\067\063\072\041\104\064" +
    "\001\002\000\034\053\uffab\054\uffab\060\112\061\120\062" +
    "\115\063\110\064\117\065\111\070\uffab\073\uffab\074\uffab" +
    "\075\uffab\102\uffab\001\002\000\050\046\uffa3\047\uffa3\050" +
    "\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\056\uffa3\060\uffa3" +
    "\061\uffa3\062\100\063\101\064\077\065\uffa3\070\uffa3\073" +
    "\uffa3\074\uffa3\075\uffa3\102\uffa3\001\002\000\036\003\057" +
    "\033\047\034\054\036\062\037\043\044\055\045\045\055" +
    "\042\060\040\061\067\066\056\067\063\072\041\104\064" +
    "\001\002\000\042\003\057\033\047\034\054\036\062\037" +
    "\043\044\055\045\045\055\042\060\040\061\067\066\056" +
    "\067\063\070\uff8c\072\041\073\uff8c\104\064\001\002\000" +
    "\006\070\131\073\132\001\002\000\006\070\uff8d\073\uff8d" +
    "\001\002\000\036\003\057\033\047\034\054\036\062\037" +
    "\043\044\055\045\045\055\042\060\040\061\067\066\056" +
    "\067\063\072\041\104\064\001\002\000\052\046\uff8f\047" +
    "\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f\056\uff8f" +
    "\060\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065\uff8f\070" +
    "\uff8f\071\uff8f\073\uff8f\074\uff8f\075\uff8f\102\uff8f\001\002" +
    "\000\006\070\uff8e\073\uff8e\001\002\000\006\070\136\102" +
    "\135\001\002\000\054\046\uff91\047\uff91\050\uff91\051\uff91" +
    "\052\uff91\053\uff91\054\uff91\056\uff91\057\uff91\060\uff91\061" +
    "\uff91\062\uff91\063\uff91\064\uff91\065\uff91\070\uff91\071\uff91" +
    "\073\uff91\074\uff91\075\uff91\102\uff91\001\002\000\036\003" +
    "\057\033\047\034\054\036\062\037\043\044\055\045\045" +
    "\055\042\060\040\061\067\066\056\067\063\072\041\104" +
    "\064\001\002\000\004\102\140\001\002\000\054\046\uff90" +
    "\047\uff90\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90\056" +
    "\uff90\057\uff90\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90" +
    "\065\uff90\070\uff90\071\uff90\073\uff90\074\uff90\075\uff90\102" +
    "\uff90\001\002\000\020\053\uffae\054\uffae\070\uffae\073\uffae" +
    "\074\uffae\075\uffae\102\uffae\001\002\000\004\073\143\001" +
    "\002\000\052\046\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f" +
    "\053\uff7f\054\uff7f\056\uff7f\060\uff7f\061\uff7f\062\uff7f\063" +
    "\uff7f\064\uff7f\065\uff7f\070\uff7f\071\uff7f\073\uff7f\074\uff7f" +
    "\075\uff7f\102\uff7f\001\002\000\004\037\ufff1\001\002\000" +
    "\004\073\146\001\002\000\004\100\uffe9\001\002\000\004" +
    "\100\150\001\002\000\050\003\uffe5\004\uffe5\007\uffe5\011" +
    "\uffe5\012\uffe5\014\uffe5\016\uffe5\017\uffe5\020\uffe5\024\uffe5" +
    "\025\uffe5\035\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\076\uffe5\101\uffe5\001\002\000\032\002\uffe8\021\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\025\uffe8\035\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\076\uffe8\001\002\000\050\003\175" +
    "\004\162\007\164\011\203\012\161\014\172\016\156\017" +
    "\155\020\160\024\010\025\021\035\015\037\157\040\011" +
    "\041\017\042\027\043\025\076\024\101\153\001\002\000" +
    "\072\002\uffe7\003\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\035\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043" +
    "\uffe7\076\uffe7\101\uffe7\001\002\000\054\003\uffe4\004\uffe4" +
    "\007\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\024\uffe4\025\uffe4\035\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\076\uffe4\101\uffe4\001" +
    "\002\000\004\072\320\001\002\000\036\003\057\033\047" +
    "\034\054\036\062\037\043\044\055\045\045\055\042\060" +
    "\040\061\067\066\056\067\063\072\041\104\064\001\002" +
    "\000\010\057\230\072\126\103\125\001\002\000\004\072" +
    "\314\001\002\000\004\072\273\001\002\000\004\072\250" +
    "\001\002\000\004\075\247\001\002\000\004\100\uffcc\001" +
    "\002\000\054\003\uffd9\004\uffd9\007\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\024" +
    "\uffd9\025\uffd9\035\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\043\uffd9\076\uffd9\101\uffd9\001\002\000\004\057\226\001" +
    "\002\000\054\003\uffe6\004\uffe6\007\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\024" +
    "\uffe6\025\uffe6\035\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6" +
    "\043\uffe6\076\uffe6\101\uffe6\001\002\000\054\003\uffd7\004" +
    "\uffd7\007\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\024\uffd7\025\uffd7\035\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\076\uffd7\101\uffd7" +
    "\001\002\000\004\075\237\001\002\000\004\075\236\001" +
    "\002\000\004\075\235\001\002\000\004\075\234\001\002" +
    "\000\054\003\uffdb\004\uffdb\007\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\024\uffdb" +
    "\025\uffdb\035\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043" +
    "\uffdb\076\uffdb\101\uffdb\001\002\000\054\003\uffdc\004\uffdc" +
    "\007\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\024\uffdc\025\uffdc\035\uffdc\037\uffdc" +
    "\040\uffdc\041\uffdc\042\uffdc\043\uffdc\076\uffdc\101\uffdc\001" +
    "\002\000\004\075\233\001\002\000\054\003\uffda\004\uffda" +
    "\007\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016" +
    "\uffda\017\uffda\020\uffda\024\uffda\025\uffda\035\uffda\037\uffda" +
    "\040\uffda\041\uffda\042\uffda\043\uffda\076\uffda\101\uffda\001" +
    "\002\000\054\003\uffd8\004\uffd8\007\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\024" +
    "\uffd8\025\uffd8\035\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\076\uffd8\101\uffd8\001\002\000\004\075\232\001" +
    "\002\000\004\072\204\001\002\000\022\024\010\025\021" +
    "\035\015\037\207\040\011\041\017\042\027\043\025\001" +
    "\002\000\004\075\uffc6\001\002\000\004\075\uffc5\001\002" +
    "\000\006\057\230\103\125\001\002\000\004\075\uffca\001" +
    "\002\000\004\075\212\001\002\000\036\003\057\033\047" +
    "\034\054\036\062\037\043\044\055\045\045\055\042\060" +
    "\040\061\067\066\056\067\063\072\041\104\064\001\002" +
    "\000\004\075\uffc9\001\002\000\004\075\215\001\002\000" +
    "\036\003\057\033\047\034\054\036\062\037\216\044\055" +
    "\045\045\055\042\060\040\061\067\066\056\067\063\072" +
    "\041\104\064\001\002\000\046\046\uff80\047\uff80\050\uff80" +
    "\051\uff80\052\uff80\053\uff80\054\uff80\056\uff80\057\230\060" +
    "\uff80\061\uff80\062\uff80\063\uff80\064\uff80\065\uff80\072\126" +
    "\073\uff80\103\125\001\002\000\004\073\uffc3\001\002\000" +
    "\042\046\uff81\047\uff81\050\uff81\051\uff81\052\uff81\053\uff81" +
    "\054\uff81\056\uff81\057\226\060\uff81\061\uff81\062\uff81\063" +
    "\uff81\064\uff81\065\uff81\073\uff81\001\002\000\004\073\223" +
    "\001\002\000\004\073\uffc4\001\002\000\004\100\uffc8\001" +
    "\002\000\004\100\150\001\002\000\054\003\uffc7\004\uffc7" +
    "\007\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\024\uffc7\025\uffc7\035\uffc7\037\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\043\uffc7\076\uffc7\101\uffc7\001" +
    "\002\000\036\003\057\033\047\034\054\036\062\037\043" +
    "\044\055\045\045\055\042\060\040\061\067\066\056\067" +
    "\063\072\041\104\064\001\002\000\006\073\uffb3\075\uffb3" +
    "\001\002\000\036\003\057\033\047\034\054\036\062\037" +
    "\043\044\055\045\045\055\042\060\040\061\067\066\056" +
    "\067\063\072\041\104\064\001\002\000\006\073\uffb4\075" +
    "\uffb4\001\002\000\054\003\uffe3\004\uffe3\007\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\024\uffe3\025\uffe3\035\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\043\uffe3\076\uffe3\101\uffe3\001\002\000\054\003" +
    "\uffe1\004\uffe1\007\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\024\uffe1\025\uffe1\035" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\076\uffe1" +
    "\101\uffe1\001\002\000\054\003\uffe0\004\uffe0\007\uffe0\011" +
    "\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\020\uffe0\024\uffe0\025\uffe0\035\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\076\uffe0\101\uffe0\001\002\000\054" +
    "\003\uffdf\004\uffdf\007\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\024\uffdf\025\uffdf" +
    "\035\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\076" +
    "\uffdf\101\uffdf\001\002\000\054\003\uffde\004\uffde\007\uffde" +
    "\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017" +
    "\uffde\020\uffde\024\uffde\025\uffde\035\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\uffde\076\uffde\101\uffde\001\002\000" +
    "\054\003\uffdd\004\uffdd\007\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\024\uffdd\025" +
    "\uffdd\035\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\076\uffdd\101\uffdd\001\002\000\004\100\150\001\002\000" +
    "\004\010\242\001\002\000\004\072\243\001\002\000\036" +
    "\003\057\033\047\034\054\036\062\037\043\044\055\045" +
    "\045\055\042\060\040\061\067\066\056\067\063\072\041" +
    "\104\064\001\002\000\004\073\245\001\002\000\004\075" +
    "\246\001\002\000\054\003\uffcb\004\uffcb\007\uffcb\011\uffcb" +
    "\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\024\uffcb\025\uffcb\035\uffcb\037\uffcb\040\uffcb\041\uffcb" +
    "\042\uffcb\043\uffcb\076\uffcb\101\uffcb\001\002\000\054\003" +
    "\uffe2\004\uffe2\007\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\017\uffe2\020\uffe2\024\uffe2\025\uffe2\035" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\076\uffe2" +
    "\101\uffe2\001\002\000\036\003\057\033\047\034\054\036" +
    "\062\037\043\044\055\045\045\055\042\060\040\061\067" +
    "\066\056\067\063\072\041\104\064\001\002\000\004\073" +
    "\252\001\002\000\004\100\uffd6\001\002\000\004\100\150" +
    "\001\002\000\060\003\uffd5\004\uffd5\005\uffd5\006\uffd5\007" +
    "\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\024\uffd5\025\uffd5\035\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\076\uffd5\101\uffd5\001\002" +
    "\000\060\003\uffd0\004\uffd0\005\257\006\uffd0\007\uffd0\011" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0" +
    "\020\uffd0\024\uffd0\025\uffd0\035\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\043\uffd0\076\uffd0\101\uffd0\001\002\000\056" +
    "\003\uffcd\004\uffcd\006\270\007\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\024\uffcd" +
    "\025\uffcd\035\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043" +
    "\uffcd\076\uffcd\101\uffcd\001\002\000\004\072\260\001\002" +
    "\000\036\003\057\033\047\034\054\036\062\037\043\044" +
    "\055\045\045\055\042\060\040\061\067\066\056\067\063" +
    "\072\041\104\064\001\002\000\004\073\262\001\002\000" +
    "\004\100\uffd3\001\002\000\004\100\150\001\002\000\060" +
    "\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2\012" +
    "\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\024\uffd2\025\uffd2\035\uffd2\037\uffd2\040\uffd2\041\uffd2\042" +
    "\uffd2\043\uffd2\076\uffd2\101\uffd2\001\002\000\060\003\uffd0" +
    "\004\uffd0\005\257\006\uffd0\007\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\024\uffd0" +
    "\025\uffd0\035\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\076\uffd0\101\uffd0\001\002\000\056\003\uffd1\004\uffd1" +
    "\006\uffd1\007\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\016\uffd1\017\uffd1\020\uffd1\024\uffd1\025\uffd1\035\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\076\uffd1\101" +
    "\uffd1\001\002\000\054\003\uffd4\004\uffd4\007\uffd4\011\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\024\uffd4\025\uffd4\035\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\076\uffd4\101\uffd4\001\002\000\004\100" +
    "\uffcf\001\002\000\004\100\150\001\002\000\054\003\uffce" +
    "\004\uffce\007\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\024\uffce\025\uffce\035\uffce" +
    "\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\076\uffce\101" +
    "\uffce\001\002\000\036\003\057\033\047\034\054\036\062" +
    "\037\043\044\055\045\045\055\042\060\040\061\067\066" +
    "\056\067\063\072\041\104\064\001\002\000\004\073\275" +
    "\001\002\000\004\100\276\001\002\000\010\013\uffc2\015" +
    "\uffc2\101\uffc2\001\002\000\010\013\uffbf\015\uffbf\101\uffbf" +
    "\001\002\000\010\013\304\015\301\101\uffbb\001\002\000" +
    "\004\071\312\001\002\000\004\101\311\001\002\000\010" +
    "\013\uffc0\015\uffc0\101\uffc0\001\002\000\022\033\047\034" +
    "\054\036\062\037\043\044\055\045\045\072\041\104\064" +
    "\001\002\000\004\071\307\001\002\000\004\071\uffbd\001" +
    "\002\000\054\003\uffe5\004\uffe5\007\uffe5\011\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\024" +
    "\uffe5\025\uffe5\035\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5" +
    "\043\uffe5\076\uffe5\101\uffe5\001\002\000\054\003\175\004" +
    "\162\007\164\011\203\012\161\013\uffbe\014\172\015\uffbe" +
    "\016\156\017\155\020\160\024\010\025\021\035\015\037" +
    "\157\040\011\041\017\042\027\043\025\076\024\101\uffbe" +
    "\001\002\000\054\003\uffc1\004\uffc1\007\uffc1\011\uffc1\012" +
    "\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1" +
    "\024\uffc1\025\uffc1\035\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\076\uffc1\101\uffc1\001\002\000\050\003\uffe5" +
    "\004\uffe5\007\uffe5\011\uffe5\012\uffe5\014\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\024\uffe5\025\uffe5\035\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\042\uffe5\043\uffe5\076\uffe5\101\uffe5\001\002\000" +
    "\050\003\175\004\162\007\164\011\203\012\161\014\172" +
    "\016\156\017\155\020\160\024\010\025\021\035\015\037" +
    "\157\040\011\041\017\042\027\043\025\076\024\101\uffbc" +
    "\001\002\000\036\003\057\033\047\034\054\036\062\037" +
    "\043\044\055\045\045\055\042\060\040\061\067\066\056" +
    "\067\063\072\041\104\064\001\002\000\004\073\316\001" +
    "\002\000\004\075\uff89\001\002\000\004\075\uff8b\001\002" +
    "\000\004\037\321\001\002\000\004\073\322\001\002\000" +
    "\004\075\uff8a\001\002\000\010\057\035\074\324\075\uffb5" +
    "\001\002\000\036\003\057\033\047\034\054\036\062\037" +
    "\043\044\055\045\045\055\042\060\040\061\067\066\056" +
    "\067\063\072\041\104\064\001\002\000\004\075\uffba\001" +
    "\002\000\004\074\327\001\002\000\040\003\057\033\047" +
    "\034\054\036\062\037\043\044\055\045\045\055\042\060" +
    "\040\061\067\066\056\067\063\072\041\075\uffb8\104\064" +
    "\001\002\000\004\074\331\001\002\000\004\075\uffb9\001" +
    "\002\000\004\037\333\001\002\000\004\072\334\001\002" +
    "\000\024\024\ufff0\025\ufff0\035\ufff0\040\ufff0\041\ufff0\042" +
    "\ufff0\043\ufff0\070\ufff0\073\ufff0\001\002\000\024\024\010" +
    "\025\021\035\015\040\011\041\017\042\027\043\025\070" +
    "\uffeb\073\uffeb\001\002\000\006\070\uffec\073\uffec\001\002" +
    "\000\004\037\346\001\002\000\006\070\341\073\342\001" +
    "\002\000\020\024\010\025\021\035\015\040\011\041\017" +
    "\042\027\043\025\001\002\000\004\100\uffef\001\002\000" +
    "\004\100\150\001\002\000\032\002\uffee\021\uffee\022\uffee" +
    "\023\uffee\024\uffee\025\uffee\035\uffee\040\uffee\041\uffee\042" +
    "\uffee\043\uffee\076\uffee\001\002\000\006\070\uffed\073\uffed" +
    "\001\002\000\006\070\uffea\073\uffea\001\002\000\004\037" +
    "\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\006\002\004\003\003\001\001\000\020\004" +
    "\015\005\013\006\011\046\025\047\006\055\027\057\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\346\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\331\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\143\001\001\000\004\005\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\035\001\001\000\026\012\043\013\065\014\060\015" +
    "\047\016\052\017\050\023\057\024\045\051\051\056\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\012\043\013\065\014\060\015\047\016\141" +
    "\017\050\023\057\024\045\051\051\056\064\001\001\000" +
    "\022\012\043\014\140\015\047\017\050\023\057\024\045" +
    "\051\051\056\064\001\001\000\002\001\001\000\006\021" +
    "\121\022\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\073\024\045\051\051\001" +
    "\001\000\004\020\067\001\001\000\002\001\001\000\022" +
    "\012\043\014\072\015\047\017\050\023\057\024\045\051" +
    "\051\056\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\103\024\045\051\051\001\001" +
    "\000\010\015\102\024\045\051\051\001\001\000\010\015" +
    "\101\024\045\051\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\047\017\123\024\045\051\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\012\122\015\047\017\050\023\057\024\045" +
    "\051\051\056\064\001\001\000\004\022\105\001\001\000" +
    "\002\001\001\000\026\012\043\013\065\014\060\015\047" +
    "\016\133\017\050\023\057\024\045\051\051\056\064\001" +
    "\001\000\030\012\043\013\065\014\060\015\047\016\127" +
    "\017\050\023\057\024\045\027\126\051\051\056\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\012\043" +
    "\013\065\014\060\015\047\016\132\017\050\023\057\024" +
    "\045\051\051\056\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\012" +
    "\043\013\065\014\060\015\047\016\136\017\050\023\057" +
    "\024\045\051\051\056\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\062" +
    "\146\001\001\000\004\007\150\001\001\000\004\010\151" +
    "\001\001\000\002\001\001\000\040\005\013\011\166\024" +
    "\165\030\153\033\177\036\164\037\200\040\167\046\201" +
    "\050\162\051\170\052\176\053\173\054\172\057\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\012\043\013\065\014\060\015\047\016\316\017" +
    "\050\023\057\024\045\051\051\056\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\070\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\013\024\165\031" +
    "\207\046\204\050\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\071\210\001\001\000" +
    "\002\001\001\000\026\012\043\013\065\014\060\015\047" +
    "\016\212\017\050\023\057\024\045\051\051\056\064\001" +
    "\001\000\004\072\213\001\001\000\002\001\001\000\032" +
    "\012\043\013\065\014\060\015\047\016\221\017\050\023" +
    "\057\024\217\045\220\050\216\051\051\056\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\073\223\001\001" +
    "\000\004\007\224\001\001\000\002\001\001\000\026\012" +
    "\043\013\065\014\060\015\047\016\226\017\050\023\057" +
    "\024\045\051\051\056\064\001\001\000\002\001\001\000" +
    "\026\012\043\013\065\014\060\015\047\016\230\017\050" +
    "\023\057\024\045\051\051\056\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\012\043\013\065\014\060\015\047\016\243\017" +
    "\050\023\057\024\045\051\051\056\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\012\043\013\065\014\060\015\047\016\250" +
    "\017\050\023\057\024\045\051\051\056\064\001\001\000" +
    "\002\001\001\000\004\063\252\001\001\000\004\007\253" +
    "\001\001\000\004\064\254\001\001\000\004\034\255\001" +
    "\001\000\004\035\266\001\001\000\002\001\001\000\026" +
    "\012\043\013\065\014\060\015\047\016\260\017\050\023" +
    "\057\024\045\051\051\056\064\001\001\000\002\001\001" +
    "\000\004\065\262\001\001\000\004\007\263\001\001\000" +
    "\004\066\264\001\001\000\004\034\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\067\270\001\001\000" +
    "\004\007\271\001\001\000\002\001\001\000\026\012\043" +
    "\013\065\014\060\015\047\016\273\017\050\023\057\024" +
    "\045\051\051\056\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\074\276\001\001\000\004\041\277\001" +
    "\001\000\006\032\301\042\302\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\305\024" +
    "\045\043\304\051\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\307\001\001\000\040\005\013\011" +
    "\166\024\165\030\153\033\177\036\164\037\200\040\167" +
    "\046\201\050\162\051\170\052\176\053\173\054\172\057" +
    "\175\001\001\000\002\001\001\000\004\010\312\001\001" +
    "\000\040\005\013\011\166\024\165\030\153\033\177\036" +
    "\164\037\200\040\167\046\201\050\162\051\170\052\176" +
    "\053\173\054\172\057\175\001\001\000\026\012\043\013" +
    "\065\014\060\015\047\016\314\017\050\023\057\024\045" +
    "\051\051\056\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\324\001\001\000\026\012" +
    "\043\013\065\014\060\015\047\016\325\017\050\023\057" +
    "\024\045\051\051\056\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\012\043\013\065\014\060\015\047" +
    "\016\327\017\050\023\057\024\045\051\051\056\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\334\001\001\000\010\005" +
    "\336\025\337\026\335\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\336\026\344\001" +
    "\001\000\004\061\342\001\001\000\004\007\343\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    // Conectar este parser con un scanner
    BasicLexerCup lex;
    public static final int EXPECTED_CONFLICTS = 12;
    boolean mainDefined = false;
    private String tipoFuncionActual = null; //Guarda la funcion actual
    String tipoSwitchActual = null; //Guarda el tipo de la variable del switch actual
    HashSet<String> caseValues = null; //Guarda los case del switch para evitar repetidos
    Map<String, String> tiposCI = new HashMap<>();
    String tipoStr ;
    List<String> listaGlobal = new ArrayList<>();
    String resultExpr;
    String condFor;
    String nombreArray;
    private final Map<String, List<String>> parametrosPorFuncion = new HashMap<>();
    

    // ...existing code...
    ArrayList<String> codigoIntermedio = new ArrayList<>();
    
    // Variables para manejo de errores
    public int errorCount = 0;
    private ErrorHandler errorHandler;
    
    // Método para establecer el ErrorHandler
    public void setErrorHandler(ErrorHandler handler) {
        this.errorHandler = handler;
    }

    // Tabla de símbolos: scope -> lista de tipos de variables
    HashMap<String, ArrayList<String>> SymbolTable = new HashMap<>();
    
    // Scope actual
    String currentScope = "global";
    int scopeCounter = 0;


    //Obtiene de que tipo es un string 
    public String obtenerTipoLiteral(String literal) {
        if (literal.matches("'.'")) {
            return "char";
        } else if (literal.matches("\\d+")) {
            return "int";
        } else if (literal.matches("\".*\"")) {
            return "string";
        }
        return "desconocido";
    }

    boolean isTipoImprimible(String tipo) {
        return tipo.equals("int") || tipo.equals("float") || tipo.equals("char") || tipo.equals("string") || tipo.equals("bool");
    }


    
    // Método para validar si una variable ya existe en el scope actual
    public boolean isVariableDeclared(String varName) {
        if (!SymbolTable.containsKey(currentScope)) {
            return false;
        }
        
        ArrayList<String> variables = SymbolTable.get(currentScope);
        for (String var : variables) {
            if (var.startsWith(varName + ":")) {
                return true;
            }
        }
        return false;
    }
    
    // Método para agregar una variable a la tabla de símbolos
    public void addToSymbolTable(String varName, String varType) {
        if (variableExists(varName)) {
            report_SemanticError("Variable '" + varName + "' ya ha sido declarada en el scope '" + currentScope + "'", null);
            return;
        }
        
        if (!SymbolTable.containsKey(currentScope)) {
            SymbolTable.put(currentScope, new ArrayList<>());
        }
        
        SymbolTable.get(currentScope).add(varName + ":" + varType);
        System.out.println("Variable agregada: " + varName + ":" + varType + " en scope: " + currentScope);
    }
    
    // Método para agregar una función a la tabla de símbolos
    public void addFunctionToSymbolTable(String funcName, String returnType, ArrayList<String> parameters) {
        if (variableExists(funcName)) {
            report_SemanticError("Función '" + funcName + "' ya ha sido declarada", null);
            return;
        }
        
        if (!SymbolTable.containsKey(currentScope)) {
            SymbolTable.put(currentScope, new ArrayList<>());
        }
        
        StringBuilder funcSignature = new StringBuilder();
        funcSignature.append(funcName).append(":function(");
        
        for (int i = 0; i < parameters.size(); i++) {
            funcSignature.append(parameters.get(i));
            if (i < parameters.size() - 1) {
                funcSignature.append(",");
            }
        }
        
        funcSignature.append(")->").append(returnType);
        
        SymbolTable.get(currentScope).add(funcSignature.toString());
        System.out.println("Función agregada: " + funcSignature.toString() + " en scope: " + currentScope);
    }

    //Obtiene los parametros de una funcion en base a su nombre
    public ArrayList<String> getTiposParametrosFuncion(String nombreFuncion) {
        for (Map.Entry<String, ArrayList<String>> entry : SymbolTable.entrySet()) {
            for (String simbolo : entry.getValue()) {
                if (simbolo.startsWith(nombreFuncion + ":function(")) {
                    int inicio = simbolo.indexOf('(') + 1;
                    int fin = simbolo.indexOf(')');
                    String params = simbolo.substring(inicio, fin);
                    
                    ArrayList<String> tipos = new ArrayList<>();
                    if (!params.isEmpty()) {
                        String[] partes = params.split(",");
                        for (String p : partes) {
                            String[] tipoNombre = p.split("_"); // ejemplo: int_a
                            tipos.add(tipoNombre[0].trim());
                        }
                    }
                    return tipos;
                }
            }
        }
        return new ArrayList<>(); // no encontrada, o sin parámetros
    }

    //Obtiene el tipo de cada parametro de una funcion
    public ArrayList<String> getTiposDeLista(String args) {
        ArrayList<String> tipos = new ArrayList<>();
        if (args == null || args.equals("sin_args")) return tipos;

        String[] partes = args.split(",");
        for (String tipo : partes) {
            tipos.add(tipo.trim());
        }
        return tipos;
    }
    
    // Método para validar si una variable existe en cualquier scope accesible
    public boolean variableExists(String varName) {
        // Buscar en scope actual
        if (isVariableDeclared(varName)) {
            return true;
        }
        
        // Buscar en scope global
        if (!currentScope.equals("global") && SymbolTable.containsKey("global")) {
            ArrayList<String> globalVars = SymbolTable.get("global");
            for (String var : globalVars) {
                if (var.startsWith(varName + ":")) {
                    return true;
                }
            }
        }
        
        return false;
    }

    //Quita las dimensiones de un array
    public String quitarDimensiones(String tipoCompleto) {
        return tipoCompleto.replaceAll("\\[.*?\\]", "");
    }
    
    // Método para validar si una función existe
    public boolean functionExists(String funcName) {
        if (SymbolTable.containsKey("global")) {
            ArrayList<String> globalItems = SymbolTable.get("global");
            for (String item : globalItems) {
                if (item.startsWith(funcName + ":function")) {
                    return true;
                }
            }
        }
        return false;
    }

    //Valida que dos tipos (string, char) sean iguales
    public boolean tipoCompatible(String declarado, String asignado) {
        if (declarado.equals(asignado)) return true;

        if (asignado.equals("sin_inicializar")) return true;

        // Ejemplo: permitir que un exprArit se asigne a int
        if (declarado.equals("int") && asignado.equals("expr_arit")) return true;
        

        return false;
    }


    public String getTipoVariable(String varName) {
    // Buscar en el scope actual
        if (SymbolTable.containsKey(currentScope)) {
            for (String entry : SymbolTable.get(currentScope)) {
                if (entry.startsWith(varName + ":")) {
                    return entry.split(":")[1];
                }
            }
        }

    // Si no está en el scope actual, buscar en global
        if (!currentScope.equals("global") && SymbolTable.containsKey("global")) {
            for (String entry : SymbolTable.get("global")) {
                if (entry.startsWith(varName + ":") && !entry.contains("function")) {
                    return entry.split(":")[1];
                }
            }
        }

        // Si no se encuentra
        return "error";
    }

    
    // Método para entrar en un nuevo scope
    public void enterScope(String scopeName) {
        currentScope = scopeName;
        if (!SymbolTable.containsKey(currentScope)) {
            SymbolTable.put(currentScope, new ArrayList<>());
        }
        System.out.println("Entrando al scope: " + currentScope);
    }
    
    // Método para salir del scope actual
    public void exitScope() {
        System.out.println("Saliendo del scope: " + currentScope);
        currentScope = "global";
    }
    
    // Método para generar un scope único para bloques anónimos
    public String generateUniqueScope() {
        return currentScope + "_block_" + (++scopeCounter);
    }
    
    // Método para imprimir la tabla de símbolos (debug)
    public void printSymbolTable() {
        System.out.println("\n=== TABLA DE SÍMBOLOS ===");
        for (String scope : SymbolTable.keySet()) {
            System.out.println("Scope: " + scope);
            for (String symbol : SymbolTable.get(scope)) {
                System.out.println("  " + symbol);
            }
        }
        System.out.println("========================\n");
    }

    
    // Método para reportar errores
    public void report_error(String message, Object info) {
        StringBuilder errorMessage = new StringBuilder();
        int line = 0;
        int column = 0;
        
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;
            if (s.left >= 0) {
                line = s.left + 1;
                if (s.right >= 0) {
                    column = s.right + 1;
                }
            }
        }
        
        // Usar el ErrorHandler si está disponible
        if (errorHandler != null) {
            errorHandler.reportError(line, column, message, "SINTÁCTICO");
        } else {
            // Fallback al comportamiento original
            errorMessage.append("Error sintáctico: ");
            if (line > 0) {
                errorMessage.append("línea " + line);
                if (column > 0) {
                    errorMessage.append(", columna " + column);
                }
            }
            errorMessage.append(": " + message);
            //System.err.println(errorMessage.toString());
        }
        
        errorCount++;
    }

     // Método para reportar errores
    public void report_SemanticError(String message, Object info) {
        StringBuilder errorMessage = new StringBuilder();
        int line = 0;
        int column = 0;
        
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;
            if (s.left >= 0) {
                line = s.left + 1;
                if (s.right >= 0) {
                    column = s.right + 1;
                }
            }
        }
        
        // Usar el ErrorHandler si está disponible
        if (errorHandler != null) {
            errorHandler.reportError(line, column, message, "SEMANTICO");
        } else {
            // Fallback al comportamiento original
            errorMessage.append("Error semantico: ");
            if (line > 0) {
                errorMessage.append("línea " + line);
                if (column > 0) {
                    errorMessage.append(", columna " + column);
                }
            }
            errorMessage.append(": " + message);
            //System.err.println(errorMessage.toString());
        }
        
        errorCount++;
    }

    // Método para guardar el código intermedio en un archivo
    public void guardarCodigoIntermedio() {
        try {
            // Ruta relativa desde donde se ejecuta el parser
            String ruta = "src/main/java/org/example/ParserLexer/resources";
            java.io.File dir = new java.io.File(ruta);
            if (!dir.exists()) dir.mkdirs();
            java.io.File file = new java.io.File(dir, "codigo3D");
            java.io.PrintWriter writer = new java.io.PrintWriter(file, "UTF-8");
            for (String linea : codigoIntermedio) {
                writer.println(linea);
            }
            writer.close();
            System.out.println("Código intermedio guardado en: " + file.getAbsolutePath());
        } catch (Exception e) {
            System.err.println("Error al guardar el código intermedio: " + e.getMessage());
        }
    }
        
    // Método para recuperación de errores
    public void syntax_error(Symbol cur_token) {
        String tokenName = symbl_name_from_id(cur_token.sym);
        String tokenValue = (cur_token.value != null) ? cur_token.value.toString() : "Token sin valor asignado";
        
        report_error("Error cerca de " + tokenName + " '" + tokenValue + "' ", cur_token);
        
        // Si hay un ErrorHandler y está en pánico, detener el análisis
        if (errorHandler != null && errorHandler.isInPanicMode() && !errorHandler.shouldContinue()) {
            throw new RuntimeException("Análisis sintáctico abortado en modo pánico");
        }
    }
    
    // Método para errores irrecuperables
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        // Entrar en modo pánico si hay un ErrorHandler
        if (errorHandler != null) {
            errorHandler.enterPanicMode();
            report_error("Error sintáctico fatal. Compilación abortada", cur_token);
        } else {
            report_error("Error sintáctico fatal. Compilación abortada", cur_token);
        }
        
        throw new java.lang.Exception("Error sintáctico irrecuperable");
    }
    
    public String getTipoFuncion(String nombreFuncion) {
        for (Map.Entry<String, ArrayList<String>> entry : SymbolTable.entrySet()) {
            for (String simbolo : entry.getValue()) {
                if (simbolo.startsWith(nombreFuncion + ":function(")) {
                    int indiceFlecha = simbolo.indexOf(")->");
                    if (indiceFlecha != -1) {
                        return simbolo.substring(indiceFlecha + 3);
                    }
                }
            }
        }
        return null;
    }
    public String symbl_name_from_id(int id) {
        return (id >= 0 && id < sym.terminalNames.length) ? 
               sym.terminalNames[id] : "UNKNOWN_TOKEN";
    }

    @SuppressWarnings("deprecation")
    public parser(BasicLexerCup lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
        
        // Si el lexer tiene un ErrorHandler, lo usamos
        if (lex != null) {
            try {
                // Usamos reflection para obtener el errorHandler del lexer
                java.lang.reflect.Field f = lex.getClass().getDeclaredField("errorHandler");
                f.setAccessible(true);
                Object handler = f.get(lex);
                if (handler instanceof ErrorHandler) {
                    this.errorHandler = (ErrorHandler) handler;
                    System.out.println("ErrorHandler conectado desde lexer a parser");
                }
            } catch (Exception e) {
                System.err.println("No se pudo obtener ErrorHandler del lexer: " + e.getMessage());
            }
        }
    }
    // Contadores para etiquetas únicas en el código intermedio
    int asigCounter = 0;
    int ifCounter = 0;
    int forCounter = 0;
    int whileCounter = 0;
    int doWhileCounter = 0;
    int switchCounter = 0;
    int caseCounter = 0;
    int funcCounter = 0;
    int llamadaCounter = 0;
    int lecturaCounter = 0;
    int escrituraCounter = 0;
    int declaracionCounter = 0;
    int temporalCounter = 0;

    //Variables globales para etiquetas y expresiones
    String exprSwitchActual = null; // Guarda la expresión actual del switch -
    String parser_etiquetaIf = null;
    String parser_etiquetaElif = null;
    String parser_etiquetaElse = null;
    String etiquetaFuncionActual = null;
    String etiquetaIfActual = null;
    String etiquetaElifActual = null;
    String etiquetaElseActual = null;
    String etiquetaForActual = null;
    String etiquetaDoWhileActual = null;
    String etiquetaSwitchActual = null;
    String etiquetaCaseActual = null;
    String etiquetaReturnActual = null;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    /* CÓDIGO DE JAVA */
    public void hola(){
        System.out.println("Inicio Cup");
    }

    public void adios(){
        System.out.println("Fin Cup");
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= declaraciones 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT = "programa";
                System.out.println("✅ Programa parseado correctamente");

                printSymbolTable();

                System.out.println("=== CÓDIGO INTERMEDIO ===\n");
                for (String line : codigoIntermedio) {
                    System.out.println(line);
                }
                System.out.println("\n=========================\n");

                // Guardar código intermedio en archivo
                guardarCodigoIntermedio();

                // Generar y guardar el código MIPS
                String codigoIntermedioDir = "src/main/java/org/example/ParserLexer/resources/codigo3D";
                GeneracionDestino.codigoDestino generador = new GeneracionDestino.codigoDestino(
                    codigoIntermedioDir,
                    tiposCI,
                    SymbolTable
                );

                String mips = generador.generarMIPS(); // También guarda automáticamente .s
                //System.out.println("=== CÓDIGO MIPS GENERADO ===\n");
                //System.out.println(mips);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= declaraciones declaracion 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "declaraciones"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= 
            {
              Object RESULT =null;
		 RESULT = "declaraciones_vacias"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion ::= declaracion_var FINLINEA 
            {
              Object RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = dv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion ::= declaracion_global 
            {
              Object RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dg; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= funcion 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= comentario 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= funcion_main 
            {
              Object RESULT =null;
		int fmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fm; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // comentario ::= INIT_COMMENT END_COMMENT 
            {
              Object RESULT =null;
		 RESULT = "comentario"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comentario",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo_dato ::= INTEGER_T 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo_dato ::= FLOAT_T 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo_dato ::= CHAR_T 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo_dato ::= STRING_T 
            {
              Object RESULT =null;
		 RESULT = "string"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_dato ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = "bool"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_dato ::= ARRX tipo_dato 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "array_" + t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_dato ::= MATRX tipo_dato 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "matrix_" + t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$0 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
               tipoStr = (tipo != null) ? tipo.toString() : "void";
               String nombreStr = (nombre != null) ? nombre.toString() : "null";
               if (nombre == null) {
                   report_error("Identificador nulo en declaración de función", cur_token);
               }
               tipoFuncionActual = tipoStr;
               String oldScope = currentScope;
               enterScope(nombreStr);
               etiquetaFuncionActual = "funcion_";
               codigoIntermedio.add("INICIO_" + etiquetaFuncionActual  + nombreStr + ":\n" + tipoStr + " " + nombreStr + "()");
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

               ArrayList<String> paramList = new ArrayList<>();
               String paramsStr = (params != null) ? params.toString() : "sin_parametros";
               if (params != null && !paramsStr.equals("sin_parametros")) {
                   String[] paramArray = paramsStr.split(",");
                   for (String param : paramArray) {
                       paramList.add(param.trim());
                   }
               }
               currentScope = "global";
               addFunctionToSymbolTable(
                   (nombre != null) ? nombre.toString() : "null",
                   tipoStr,
                   paramList
               );
               String nombreStr = (nombre != null) ? nombre.toString() : "null";
               codigoIntermedio.add("Parametros_" + etiquetaFuncionActual  + nombreStr + ": " + paramList);
               parametrosPorFuncion.put(nombreStr, paramList);
               currentScope = (nombre != null) ? nombre.toString() : "null";
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funcion ::= FUNCTION tipo_dato IDENTIFIER ESH_IZ NT$0 lista_parametros EZH_DE NT$1 bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               tipoFuncionActual = null;
               exitScope();
               String nombreStr = (nombre != null) ? nombre.toString() : "null";
               codigoIntermedio.add("FIN_" + etiquetaFuncionActual  + nombreStr + ":");
               etiquetaFuncionActual = null;
               RESULT = "funcion_" + nombreStr;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_parametros ::= lista_parametros COMA parametro 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                       String listaStr = (lista != null) ? lista.toString() : "sin_parametros";
                       if (listaStr.equals("sin_parametros") || listaStr.isEmpty()) {
                           RESULT = param;
                       } else {
                           RESULT = listaStr + "," + param;
                       }
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_parametros ::= parametro 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = param; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_parametros ::= 
            {
              Object RESULT =null;
		 RESULT = "sin_parametros"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametro ::= tipo_dato IDENTIFIER 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                // Agregar parámetro a la tabla de símbolos del scope actual
                addToSymbolTable(nombre.toString(), tipo.toString());
                RESULT = tipo + "_" + nombre;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$2 ::= 
            {
              Object RESULT =null;

                   if (mainDefined) {
                       report_SemanticError("Ya se ha definido una función 'main'. Solo se permite una.", cur_token);
                   } else {
                       mainDefined = true;
                       enterScope("main");
                       //Generación de código intermedio
                       codigoIntermedio.add("INICIO_main: ");
                   }
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funcion_main ::= MAIN ESH_IZ EZH_DE NT$2 bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   exitScope();
                   //Generación de código intermedio
                   codigoIntermedio.add("FIN_main: ");
                   RESULT = "main";
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_main",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloque ::= INIT_BLOC sentencias END_BLOC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "bloque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "sentencias"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencias ::= 
            {
              Object RESULT =null;
		 RESULT = "sentencias_vacias"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= estructura_control 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ec; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= declaracion_var FINLINEA 
            {
              Object RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = dv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= asignacion FINLINEA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= retorno FINLINEA 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= lectura FINLINEA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= escritura FINLINEA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= BREAK FINLINEA 
            {
              Object RESULT =null;
		 RESULT = "break"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= llamada_funcion FINLINEA 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = lf; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= comentario 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= error 
            {
              Object RESULT =null;
		
                  report_error("Error al realizar una sentencia", cur_token);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // estructura_control ::= if_stmt 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // estructura_control ::= do_while 
            {
              Object RESULT =null;
		int dwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dw = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dw; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // estructura_control ::= for_stmt 
            {
              Object RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // estructura_control ::= switch_stmt 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ss; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$3 ::= 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
              String type = tiposCI.getOrDefault(cond.toString(), "desconocido");
              if (cond == null) {
                  report_SemanticError("Condición nula en if", cur_token);
                  RESULT = "if_error";
              } else {
                    if (!type.equals("bool")) {
                        report_SemanticError("La condición del 'if' debe ser de tipo 'expr_rel' (bool), no '" + type + "'", cur_token);
                        RESULT = "if_error";
                    }
                  String newScope = generateUniqueScope();
                  enterScope(newScope);
                  etiquetaIfActual = "if_" + (++ifCounter);
                  codigoIntermedio.add("INICIO_" + etiquetaIfActual + ":\nif (" + cond + ") goto " + etiquetaIfActual + "_true;");
                  codigoIntermedio.add("goto FIN_" + etiquetaIfActual + "_bloque;\n");
                  codigoIntermedio.add( etiquetaIfActual + "_true:");
              }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

            codigoIntermedio.add("goto FIN_" + etiquetaIfActual + ";\n");
            codigoIntermedio.add("FIN_" + etiquetaIfActual + "_bloque:");
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // if_stmt ::= IF ESH_IZ exprPrin EZH_DE NT$3 bloque NT$4 elif_list else_stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              exitScope();
              codigoIntermedio.add("FIN_" + etiquetaIfActual + ":");
              etiquetaIfActual = null;
              RESULT = "if";
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$5 ::= 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                if (cond == null) {
                    report_SemanticError("Condición nula en elif", cur_token);
                    RESULT = "elif_error";
                } else  {
                    String type = tiposCI.getOrDefault(cond.toString(), "desconocido");
                     if (!type.equals("bool")) {
                        report_SemanticError("La condición del 'elif' debe ser de tipo 'expr_rel' (bool), no '" + type + "'", cur_token);
                        RESULT = "elif_error";
                    }
                    String newScope = generateUniqueScope();
                    enterScope(newScope);
                    etiquetaElifActual = "elif_" + (++ifCounter);
                    codigoIntermedio.add("INICIO_" + etiquetaElifActual + ":\nif (" + cond + ") goto " + etiquetaElifActual + "_true;");
                    codigoIntermedio.add("goto FIN_" + etiquetaElifActual + ";\n");
                    codigoIntermedio.add( etiquetaElifActual + "_true:");
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                exitScope();
                codigoIntermedio.add("goto FIN_" + etiquetaIfActual + ";\n");
                codigoIntermedio.add("FIN_" + etiquetaElifActual + ":");
                etiquetaElifActual = null;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // elif_list ::= ELIF ESH_IZ exprPrin EZH_DE NT$5 bloque NT$6 elif_list 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "elif_list"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // elif_list ::= 
            {
              Object RESULT =null;
		 RESULT = "sin_elif"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$7 ::= 
            {
              Object RESULT =null;

                String newScope = generateUniqueScope();
                enterScope(newScope);
                etiquetaElseActual = "else_" + (++ifCounter);
                codigoIntermedio.add("INICIO_" + etiquetaElseActual + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // else_stmt ::= ELSE NT$7 bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                exitScope();
                codigoIntermedio.add("FIN_" + etiquetaElseActual + ":");
                codigoIntermedio.add("goto FIN_" + etiquetaIfActual + ";\n");
                etiquetaElseActual = null;
                RESULT = "else";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // else_stmt ::= 
            {
              Object RESULT =null;
		 RESULT = "sin_else"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$8 ::= 
            {
              Object RESULT =null;

               String newScope = generateUniqueScope();
               enterScope(newScope);
               etiquetaDoWhileActual = "do_while_" + (++doWhileCounter);
               codigoIntermedio.add("INICIO_" + etiquetaDoWhileActual + ":");
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // do_while ::= DO NT$8 bloque WHILE ESH_IZ exprPrin EZH_DE FINLINEA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                String type = tiposCI.getOrDefault(cond.toString(), "desconocido");
               if (cond == null) {
                   report_SemanticError("Condición nula en do-while", cur_token);
                   exitScope();
                   etiquetaDoWhileActual = null;
                   RESULT = "while_error";
               } else if (!type.equals("bool")) {
                   report_SemanticError("La condición del 'while' debe ser de tipo 'expr_rel' (bool), no '" + type + "'", cur_token);
                   exitScope();
                   etiquetaDoWhileActual = null;
                   RESULT = "while_error";
               } else {
                   exitScope();
                   codigoIntermedio.add("CONDICION_do_while_:\nif (" + resultExpr + ") goto INICIO_" + etiquetaDoWhileActual + ";");
                   codigoIntermedio.add("FIN_" + etiquetaDoWhileActual + ":");
                   etiquetaDoWhileActual = null;
                   RESULT = "do_while";
               }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_while",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$9 ::= 
            {
              Object RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object init = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                etiquetaForActual = "for_" + (++forCounter);
                codigoIntermedio.add("INICIO_" + etiquetaForActual + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object init = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                condFor = resultExpr;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object init = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object inc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

               if (cond == null) {
                   report_SemanticError("Condición nula en for", cur_token);
                   RESULT = "for_error";
               } else {
                   String newScope = generateUniqueScope();
                   enterScope(newScope);
                   String type = tiposCI.getOrDefault(cond.toString(), "desconocido");
                   if (!type.equals("int") && !type.equals("bool")) {
                        report_SemanticError("La segunda condición del 'for' debe ser de tipo 'expr_rel' (bool), no '" + type + "'", cur_token);
                        RESULT = "for_error";
                   }
                   codigoIntermedio.add("if (" + condFor + ") goto " + etiquetaForActual + "_true;");
                   codigoIntermedio.add("goto FIN_" + etiquetaForActual + ";\n");
                   codigoIntermedio.add( etiquetaForActual + "_true:");
               }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // for_stmt ::= FOR ESH_IZ init_for NT$9 FINLINEA exprPrin NT$10 FINLINEA end_for EZH_DE NT$11 bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object init = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object inc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               exitScope();
               codigoIntermedio.add("INCREMENTO_for_ (" + resultExpr + ")");
               codigoIntermedio.add("goto INICIO_" + etiquetaForActual + ";\n");
               codigoIntermedio.add("FIN_" + etiquetaForActual + ":\n");
               etiquetaForActual = null;
               RESULT = "for";
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // init_for ::= declaracion_var 
            {
              Object RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_for",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // init_for ::= asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_for",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // end_for ::= exprPrin 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int epright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ep; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_for",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // end_for ::= asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_for",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$12 ::= 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                  String exprStr = tiposCI.getOrDefault(expr.toString(), "desconocido");
                  if (expr == null) {
                      report_error("Expresión nula en switch", cur_token);
                      RESULT = "error";
                  } else {
                      tipoSwitchActual = exprStr;
                      exprSwitchActual = expr.toString();
                      String newScope = generateUniqueScope();
                      enterScope(newScope);
                      caseValues = new HashSet<>();
                      etiquetaSwitchActual = "switch_" + (++switchCounter);
                      codigoIntermedio.add("INICIO_" + etiquetaSwitchActual + ": switch (" + expr.toString() + "):");
                  }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // switch_stmt ::= SWITCH ESH_IZ exprPrin EZH_DE INIT_BLOC NT$12 case_list default_case END_BLOC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                  tipoSwitchActual = null;
                  caseValues = null;
                  exitScope();
                  codigoIntermedio.add("FIN_switch_" + etiquetaSwitchActual + ":"); 
                  etiquetaSwitchActual = null;
                  RESULT = "switch";
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // case_list ::= case_list case_item 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ci = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "case_list"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // case_list ::= 
            {
              Object RESULT =null;
		 RESULT = "sin_cases"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // case_item ::= CASE case_value DOSPUNTOS sentencias 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if (cv == null) {
                    report_error("Valor nulo en case", cur_token);
                    RESULT = "case_error";
                } else {
                    String valor = tiposCI.getOrDefault(cv.toString(), "desconocido");
                    String tipoActual = tipoSwitchActual != null ? tipoSwitchActual.toString() : "";
                    if (!tipoActual.equals(valor)) {
                        report_SemanticError("El valor '" + valor + "' no es compatible con el tipo del 'switch' (" + tipoSwitchActual + ")", cur_token);
                    }
                    if (caseValues.contains(valor)) {
                        report_SemanticError("Valor de 'case' duplicado: " + valor, cur_token);
                    } else {
                        caseValues.add(valor);
                    }
                    etiquetaCaseActual = "case_" + (++caseCounter);
                    codigoIntermedio.add("INIT_CASE_" + etiquetaCaseActual + ": if (" + exprSwitchActual + " == " + cv + ") goto " + etiquetaCaseActual + "_true;");
                    codigoIntermedio.add("FIN_CASE_" + etiquetaCaseActual + ":");
                    etiquetaCaseActual = null;
                    RESULT = "case";
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_item",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // case_value ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_value",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // default_case ::= DEFAULT DOSPUNTOS sentencias 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "default"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_case",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // default_case ::= 
            {
              Object RESULT =null;
		 RESULT = "sin_default"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_case",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracion_var ::= tipo_dato IDENTIFIER declaracion_init 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object init = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if (tipo == null) {
                        report_error("Tipo nulo en declaración de variable", cur_token);
                        RESULT = "declaracion_error";
                    } else if (nombre == null) {
                        report_error("Identificador nulo en declaración de variable", cur_token);
                        RESULT = "declaracion_error";
                    } else if (init == null) {
                        report_error("Inicialización nula en declaración de variable", cur_token);
                        RESULT = "declaracion_error";
                    } else {
                        String tipoDeclarado = tipo.toString();
                        String tipoInicializado = tiposCI.getOrDefault(init.toString(), "desconocido");
                        if (tipoInicializado != "desconocido"){
                            if (tipoInicializado != null && !tipoCompatible(tipoDeclarado, tipoInicializado)) {
                                report_SemanticError("No se puede asignar un valor de tipo '" + tipoInicializado + "' a una variable de tipo '" + tipoDeclarado + "'", cur_token);
                            }
                        }

                        addToSymbolTable(nombre.toString(), tipoDeclarado);
                        etiquetaReturnActual = "declaracion_" + (++asigCounter);
                        codigoIntermedio.add(etiquetaReturnActual + ": " + nombre.toString() + " = " + (init != null ? init.toString() : "0") + ";");
                        etiquetaReturnActual = null;
                        RESULT = "declaracion_" + nombre;
                    }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_var",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaracion_var ::= tipo_dato IDENTIFIER PIPE exprPrin PIPE exprPrin PIPE 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dim1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dim1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dim1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dim2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dim2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dim2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                      if (tipo == null) {
                          report_error("Tipo nulo en declaración de arreglo", cur_token);
                          RESULT = "declaracion_array_error";
                      } else if (nombre == null) {
                          report_error("Identificador nulo en declaración de arreglo", cur_token);
                          RESULT = "declaracion_array_error";
                      } else if (dim1 == null || dim2 == null) {
                          report_error("Dimensión nula en declaración de arreglo", cur_token);
                          RESULT = "declaracion_array_error";
                      } else {
                        String type1 = tiposCI.getOrDefault(dim1.toString(), "desconocido");
                        String type2 = tiposCI.getOrDefault(dim2.toString(), "desconocido");
                          if (!type1.equals("int") || !type2.equals("int")) {
                              report_SemanticError("Las dimensiones del arreglo deben ser de tipo 'int'. Se encontró: [" 
                                                  + type1 + ", " + type2 + "]", cur_token);
                          }
                          String arrayType = tipo + "[" + type1 + "][" + type2 + "]";
                          addToSymbolTable(nombre.toString(), arrayType);
                          arrayType = tipo + "[" + dim1 + "][" + dim2 + "]";
                          etiquetaReturnActual = "declaracion_array_" + (++asigCounter);
                          codigoIntermedio.add(etiquetaReturnActual + ": " + nombre.toString() + " = new " + arrayType + ";");
                          etiquetaReturnActual = null;
                          RESULT = "declaracion_array_" + nombre;
                      }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_var",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaracion_var ::= tipo_dato IDENTIFIER PIPE exprPrin PIPE 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dim1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dim1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dim1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                      if (tipo == null) {
                          report_error("Tipo nulo en declaración de arreglo", cur_token);
                          RESULT = "declaracion_array_error";
                      } else if (nombre == null) {
                          report_error("Identificador nulo en declaración de arreglo", cur_token);
                          RESULT = "declaracion_array_error";
                      } else if (dim1 == null) {
                          report_error("Dimensión nula en declaración de arreglo", cur_token);
                          RESULT = "declaracion_array_error";
                      } else {
                        String type1 = tiposCI.getOrDefault(dim1.toString(), "desconocido");
                          if (!type1.equals("int")) {
                              report_SemanticError("Las dimensiones del arreglo deben ser de tipo 'int'. Se encontró: [" 
                                                  + type1 + "]", cur_token);
                          }
                          String arrayType = tipo + "[" + type1 + "]";
                          addToSymbolTable(nombre.toString(), arrayType);
                          arrayType = tipo + "[" + dim1 + "]";
                          etiquetaReturnActual = "declaracion_array_" + (++asigCounter);
                          codigoIntermedio.add(etiquetaReturnActual + ": " + nombre.toString() + " = new " + arrayType + ";");
                          etiquetaReturnActual = null;
                          RESULT = "declaracion_array_" + nombre;
                      }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_var",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declaracion_global ::= GLOBAL tipo_dato IDENTIFIER declaracion_init FINLINEA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object init = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    String tipoDeclarado = tipo.toString();
                    String tipoInicializado = tiposCI.getOrDefault(init.toString(), "desconocido");
                    
                    if (tipoInicializado != "desconocido"){
                        if (tipoInicializado != null && !tipoCompatible(tipoDeclarado, tipoInicializado)) {
                            report_SemanticError("No se puede asignar un valor de tipo '" + tipoInicializado + "' a una variable de tipo '" + tipoDeclarado + "'", cur_token);
                        }
                    }

                    String oldScope = currentScope;
                    currentScope = "global";
                    addToSymbolTable(nombre.toString(), tipoDeclarado);
                    currentScope = oldScope;
                    etiquetaReturnActual = "declaracion_global_" + (++asigCounter);
                    codigoIntermedio.add(etiquetaReturnActual + ": " + nombre.toString() + " = " + (init != null ? init.toString() : "0") + ";");
                    etiquetaReturnActual = null;
                    RESULT = "declaracion_global_" + nombre;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_global",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declaracion_init ::= ASIGNA exprPrin 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_init",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaracion_init ::= 
            {
              Object RESULT =null;
		 RESULT = "sin_inicializar"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_init",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // asignacion ::= IDENTIFIER ASIGNA exprPrin 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 if (!variableExists(nombre.toString())) {
                     report_SemanticError("Variable '" + nombre + "' no ha sido declarada", cur_token);
                 } else {
                     String tipoVar = getTipoVariable(nombre.toString());
                     String tipoExpr = tiposCI.getOrDefault(expr.toString(), "desconocido");
                    if (tipoExpr.equals("error")){
                        String tipoCompleto = getTipoVariable(nombreArray);
                        String tipoBase = quitarDimensiones(tipoCompleto);
                        tipoExpr = tipoBase;
                    }
                     System.out.println("Temp =====================> " + expr + "Valor =======> " + tipoExpr );
                    if(tipoExpr!= "desconocido"){
                        if (!tipoCompatible(tipoVar, tipoExpr)) {
                            report_SemanticError("No se puede asignar un valor de tipo '" + tipoExpr +
                                        "' a una variable de tipo '" + tipoVar + "'", cur_token);
                        }
                    }
                 }
                 etiquetaReturnActual = "asig_" + (++asigCounter);
                 codigoIntermedio.add(etiquetaReturnActual + ": " + nombre + " = " + expr.toString() + ";");
                 etiquetaReturnActual = null;
                 RESULT = expr;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // asignacion ::= accesoArreglo ASIGNA exprPrin 
            {
              Object RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                String tipoCompleto = getTipoVariable(nombreArray);
                String tipoBase = quitarDimensiones(tipoCompleto);
                String type = tiposCI.getOrDefault(expr.toString(), "null");
                //System.out.println("Temp =====================> " + expr + "Valor =======> " + tipoCompleto );
                if (!tipoCompatible(tipoBase, type)) {
                    report_SemanticError("No se puede asignar un valor de tipo '" + type +
                                        "' al elemento del arreglo de tipo '" + tipoBase + "'", cur_token);
                }
            
                 etiquetaReturnActual = "asig_array_" + (++asigCounter);
                 codigoIntermedio.add(etiquetaReturnActual + ": " + acc.toString() + " = " + expr.toString() + ";");
                 etiquetaReturnActual = null;
                 RESULT = expr;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // exprPrin ::= exprLog 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprPrin",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // exprPrin ::= error 
            {
              Object RESULT =null;
		
               report_error("Error al generar la expresion", cur_token);
               RESULT = "error";
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprPrin",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // exprLog ::= exprLog operadorLog exprRel 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              String tipo1 = tiposCI.getOrDefault(el.toString(), "null");
              String tipo2 = tiposCI.getOrDefault(er.toString(), "null");

              if (!tipo1.equals("bool") && !tipo1.equals("true") && !tipo1.equals("false") || !tipo2.equals("bool") && !tipo2.equals("true") && !tipo2.equals("false")) {
                  report_SemanticError("Las expresiones lógicas solo se pueden aplicar a tipos 'bool'. Se encontraron: '" + tipo1 + "' y '" + tipo2 + "'", cur_token);
              }

              String temp = "t" + (++temporalCounter);
              codigoIntermedio.add(temp + " = " + el + " " + op + " " + er + ";");
              tiposCI.put(temp, "bool");
              resultExpr = temp;
              RESULT = temp;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLog",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // exprLog ::= exprRel 
            {
              Object RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = er;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLog",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // exprLog ::= NEGACION exprRel 
            {
              Object RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              String tipo = tiposCI.getOrDefault(er.toString(), "desconocido");
              if (!tipo.equals("bool") && !tipo.equals("true") && !tipo.equals("false")) {
                  report_SemanticError("El operador '!' solo se aplica a expresiones booleanas. Se encontró: '" + tipo + "'", cur_token);
              }

              String temp = "t" + (++temporalCounter);
              codigoIntermedio.add(temp + " = !" + er + ";");
              tiposCI.put(temp, "bool");
              RESULT = temp;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLog",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operadorLog ::= DISYUNCION 
            {
              Object RESULT =null;
		 RESULT = "||"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLog",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operadorLog ::= CONJUNCION 
            {
              Object RESULT =null;
		 RESULT = "&&"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLog",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // exprRel ::= exprArit operadorRel exprArit 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              String tipo1 = tiposCI.getOrDefault(ea1.toString(), "null");
              String tipo2 = tiposCI.getOrDefault(ea2.toString(), "null");

              if (!tipo1.equals(tipo2)) {
                  report_SemanticError("Tipos incompatibles en comparación relacional: '" + tipo1 + "' y '" + tipo2 + "'", cur_token);
              } else if (!tipo1.equals("int") && !tipo1.equals("float") && !tipo1.equals("char")) {
                  report_SemanticError("Operaciones relacionales solo válidas entre 'int', 'float' o 'char'. Se encontró: '" + tipo1 + "'", cur_token);
              }

              String temp = "t" + (++temporalCounter);
              codigoIntermedio.add(temp + " = " + ea1 + " " + op + " " + ea2 + ";");
              tiposCI.put(temp, "bool");  
              resultExpr = temp;
              RESULT = temp;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRel",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // exprRel ::= exprArit 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              RESULT = ea; 
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRel",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operadorRel ::= MAYOR 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operadorRel ::= MENOR 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operadorRel ::= MAYORIGUAL 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operadorRel ::= MENORIGUAL 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operadorRel ::= COMPARACION 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operadorRel ::= DIFERENTE 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // exprArit ::= exprArit operadorArit termino 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
               String tipoIzq = tiposCI.getOrDefault(ea.toString(), "null");
               String tipoDer = tiposCI.getOrDefault(t.toString(), "null");

               if (!tipoIzq.equals(tipoDer)) {
                   report_SemanticError("Tipos incompatibles en operación aritmética: '" + tipoIzq + "' y '" + tipoDer + "'", cur_token);
               } else if (!tipoIzq.equals("int") && !tipoIzq.equals("float")) {
                   report_SemanticError("Solo se permiten operaciones aritméticas entre 'int' o 'float'. Se encontró: '" + tipoIzq + "'", cur_token);
               }
               String temp = "t" + (++temporalCounter);
               codigoIntermedio.add(temp + " = " + ea + " " + op + " " + t + ";");
               tiposCI.put(temp, tipoIzq);
               resultExpr = temp;
               RESULT = temp; 
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprArit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // exprArit ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprArit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // exprArit ::= operandoUnario 
            {
              Object RESULT =null;
		int ouleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ouright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ou = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ou; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprArit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // termino ::= termino MULTIPLICA factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              String temp = "t" + (++temporalCounter);
              codigoIntermedio.add(temp + " = " + t + " * " + f + ";");
              RESULT = temp;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // termino ::= termino DIVIDE factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              String temp = "t" + (++temporalCounter);
              codigoIntermedio.add(temp + " = " + t + " / " + f + ";");
              RESULT = temp;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // termino ::= termino MODULO factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              String temp = "t" + (++temporalCounter);
              codigoIntermedio.add(temp + " = " + t + " % " + f + ";");
              RESULT = temp;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // termino ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operadorArit ::= SUMA 
            {
              Object RESULT =null;
		 RESULT = "+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operadorArit ::= RESTA 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operadorArit ::= MULTIPLICA 
            {
              Object RESULT =null;
		 RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operadorArit ::= DIVIDE 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operadorArit ::= MODULO 
            {
              Object RESULT =null;
		 RESULT = "%"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operadorArit ::= POTENCIA 
            {
              Object RESULT =null;
		 RESULT = "^"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operandoUnario ::= signo_unario factor 
            {
              Object RESULT =null;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object signo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     String tipoFactor = tiposCI.getOrDefault(f.toString(), "desconocido");
                     String temp = "t" + (++temporalCounter);

                     if (signo.equals("-") || signo.equals("+")) {
                         if (!tipoFactor.equals("int") && !tipoFactor.equals("float")) {
                             report_SemanticError("El operador '" + signo + "' solo se puede aplicar a tipos numéricos. Se encontró: " + tipoFactor, cur_token);
                         }
                     } else if (signo.equals("!")) {
                         if (!tipoFactor.equals("bool") && !tipoFactor.equals("true") && !tipoFactor.equals("false")) {
                             report_SemanticError("El operador '!' solo se puede aplicar a booleanos. Se encontró: " + tipoFactor, cur_token);
                         }
                     }

                     codigoIntermedio.add(temp + " = " + signo + f + ";");
                     tiposCI.put(temp, tipoFactor);
                     RESULT = temp;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operandoUnario ::= INCREMENTO IDENTIFIER 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     if (!variableExists(nombre.toString())) {
                         report_SemanticError("Variable '" + nombre + "' no ha sido declarada", cur_token);
                     }

                     String tipo = getTipoVariable(nombre.toString());
                     if (!tipo.equals("int") && !tipo.equals("float")) {
                         report_SemanticError("El operador '++' solo puede aplicarse a variables numéricas. Se encontró: " + tipo, cur_token);
                     }

                     etiquetaReturnActual = "incremento_" + (++asigCounter);
                     codigoIntermedio.add(etiquetaReturnActual + ": " + nombre + " = " + nombre + " + 1;");
                     tiposCI.put(nombre.toString(), tipo); // se mantiene el tipo
                     etiquetaReturnActual = null;
                     RESULT = nombre;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operandoUnario ::= DECREMENTO IDENTIFIER 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     if (!variableExists(nombre.toString())) {
                         report_SemanticError("Variable '" + nombre + "' no ha sido declarada", cur_token);
                     }

                     String tipo = getTipoVariable(nombre.toString());
                     if (!tipo.equals("int") && !tipo.equals("float")) {
                         report_SemanticError("El operador '--' solo puede aplicarse a variables numéricas. Se encontró: " + tipo, cur_token);
                     }

                     etiquetaReturnActual = "decremento_" + (++asigCounter);
                     codigoIntermedio.add(etiquetaReturnActual + ": " + nombre + " = " + nombre + " - 1;");
                     tiposCI.put(nombre.toString(), tipo);
                     etiquetaReturnActual = null;
                     RESULT = nombre;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // signo_unario ::= SUMA 
            {
              Object RESULT =null;
		 RESULT = "+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signo_unario",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // signo_unario ::= RESTA 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signo_unario",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // accesoArreglo ::= IDENTIFIER BRACEIZQ exprPrin BRACEDER 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idx = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    if (nombre == null || idx == null) {
                        report_error("Acceso nulo a arreglo", cur_token);
                        RESULT = "errorArreglo";
                    } else {
                        if (!variableExists(nombre.toString())) {
                            report_SemanticError("Arreglo '" + nombre + "' no ha sido declarada", cur_token);
                        } else {
                            String type = tiposCI.getOrDefault(idx.toString(), "desconocido");
                            if (!type.equals("int")) {
                                report_SemanticError("El índice del arreglo debe ser de tipo 'int', no '" + type + "'", cur_token);
                            }
                        }
                        //String temp = "t" + (++temporalCounter);
                        String arry = nombre.toString() + "[" + idx + "]";
                        nombreArray = nombre.toString();
                        //codigoIntermedio.add(temp + " = " + nombre.toString() + "[" + idx + "];");
                        RESULT = arry;
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoArreglo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // accesoArreglo ::= IDENTIFIER BRACEIZQ exprPrin COMA exprPrin BRACEDER 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idx1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idx1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object idx1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idx2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idx2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idx2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    if (nombre == null || idx1 == null || idx2 == null) {
                        report_error("Acceso nulo a matriz", cur_token);
                        RESULT = "errorArreglo";
                    } else {
                        if (!variableExists(nombre.toString())) {
                            report_SemanticError("Arreglo '" + nombre + "' no ha sido declarada", cur_token);
                        } else {
                            String type1 = tiposCI.getOrDefault(idx1.toString(), "desconocido");
                            String type2 = tiposCI.getOrDefault(idx2.toString(), "desconocido");
                            if (!type1.equals("int") || !type2.equals("int")) {
                                report_SemanticError("Los índices de la matriz deben ser de tipo 'int'. Se encontró: [" 
                                                      + type1 + ", " + type2 + "]", cur_token);
                            }
                        }
                        //String temp = "t" + (++temporalCounter);
                        String arry = nombre.toString() + "[" + idx1 + "][" + idx2 + "]";
                        //codigoIntermedio.add(temp + " = " + nombre.toString() + "[" + idx1 + "][" + idx2 + "];");
                        nombreArray = nombre.toString();
                        RESULT = arry;
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoArreglo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // llamada_funcion ::= IDENTIFIER ESH_IZ lista_expresiones EZH_DE 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    if (nombre == null || args == null) {
                        report_error("Llamada a función con identificador o argumentos nulos", cur_token);
                        RESULT = "error";
                    } else {
                        String nombreFuncion = nombre.toString();
                        
                        if (!functionExists(nombreFuncion)) {
                            if(nombreFuncion.equals("print")){
                            }else{
                                report_SemanticError("Función '" + nombreFuncion + "' no ha sido declarada", cur_token);
                            }
                        } else {
                            ArrayList<String> tiposEsperados = getTiposParametrosFuncion(nombreFuncion);
                            ArrayList<String> tiposRecibidos = (ArrayList<String>) args;

                            if (tiposEsperados.size() != tiposRecibidos.size()) {
                                report_SemanticError("Cantidad de argumentos inválida para la función '" +
                                    nombreFuncion + "'. Se esperaban " + tiposEsperados.size() +
                                    " y se recibieron " + tiposRecibidos.size(), cur_token);
                            } else {
                                for (int i = 0; i < tiposEsperados.size(); i++) {
                                    if (!tipoCompatible(tiposEsperados.get(i), tiposRecibidos.get(i))) {
                                        report_SemanticError("Tipo de argumento inválido en la posición " + (i+1) +
                                            " para la función '" + nombreFuncion + "'. Se esperaba '" +
                                            tiposEsperados.get(i) + "' y se recibió '" + tiposRecibidos.get(i) + "'", cur_token);
                                    }
                                }
                            }
                        }
                        String tipoFuncion = getTipoFuncion(nombreFuncion);
                        if(!nombreFuncion.equals("print")){
                            if (tipoFuncion == null) {
                                report_SemanticError("Función '" + nombreFuncion + "' no tiene tipo de retorno definido", cur_token);
                            }
                        }
                        String temp = "t" + (++temporalCounter);
                        String etiqueta = "llamada_" + (++llamadaCounter);
                        codigoIntermedio.add(etiqueta + ": " + temp + " = call " + nombreFuncion + "(" + listaGlobal.toString() + ");");
                        listaGlobal.clear();
                        RESULT = temp;
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // lista_expresiones ::= lista_expresiones COMA exprPrin 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int epright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String type = tiposCI.getOrDefault(ep.toString(), "desconocido");
                        List<String> lista = (List<String>) le;

                        listaGlobal.add(ep.toString());

                        lista.add(type);  
                        RESULT = lista;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // lista_expresiones ::= exprPrin 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int epright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String type = tiposCI.getOrDefault(ep.toString(), "desconocido");
                        List<String> lista = new ArrayList<>();
                        lista.add(type);
                        
                        listaGlobal.add(ep.toString());
                        RESULT = lista;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // lista_expresiones ::= 
            {
              Object RESULT =null;
		
                        RESULT = new ArrayList<String>();
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // retorno ::= RETURN exprPrin 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           
                String type = tiposCI.getOrDefault(valor.toString(), "null");
               if (!type.equals(tipoFuncionActual)) {
                   report_SemanticError("Tipo de retorno inválido. Se esperaba '" + tipoFuncionActual + "' pero se encontró '" + type + "'", cur_token);
               }
               etiquetaReturnActual = "return_" + (++funcCounter);
               codigoIntermedio.add(etiquetaReturnActual + ": return " + valor.toString() + ";");
               etiquetaReturnActual = null;
               RESULT = "return_" + valor;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorno",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // lectura ::= LEER ESH_IZ IDENTIFIER EZH_DE 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              if (!variableExists(nombre.toString()) || functionExists(nombre.toString())) {
                  report_SemanticError("Variable '" + nombre + "' no ha sido declarada", cur_token);
              }
              etiquetaReturnActual = "leer_" + (++asigCounter);
              codigoIntermedio.add(etiquetaReturnActual + ": leer " + nombre.toString() + ";");
              etiquetaReturnActual = null;
              RESULT = "leer_" + nombre;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lectura",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // escritura ::= IMPRIMIR ESH_IZ exprPrin EZH_DE 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                String type = tiposCI.getOrDefault(expr.toString(), "null");
                if (!isTipoImprimible(type)) {
                    report_SemanticError("Tipo '" + type + "' no se puede imprimir", cur_token);
                    RESULT = "Fallo_imprimir" ;
                }
                etiquetaReturnActual = "imprimir_" + (++asigCounter);
                codigoIntermedio.add(etiquetaReturnActual + ": imprimir " + expr.toString() + ";");
                etiquetaReturnActual = null;
                RESULT = "imprimir_" + expr;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // factor ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             String temp = "t" + (++temporalCounter);
             codigoIntermedio.add(temp + " = " + il + ";");
             tiposCI.put(temp.toString(),"int");
             RESULT = temp;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // factor ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             String temp = "t" + (++temporalCounter);
             codigoIntermedio.add(temp + " = " + fl + ";");
             tiposCI.put(temp.toString(),"float");
             RESULT = temp;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // factor ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             String temp = "t" + (++temporalCounter);
             codigoIntermedio.add(temp + " = " + "'" + cl + "'" + ";");
             tiposCI.put(temp.toString(),"char");
             RESULT = temp;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // factor ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             String temp = "t" + (++temporalCounter);
             codigoIntermedio.add(temp + " = " + "\"" + sl + "\"" + ";");
             tiposCI.put(temp.toString(),"string");
             RESULT = temp;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // factor ::= TRUE 
            {
              Object RESULT =null;
		
             String temp = "t" + (++temporalCounter);
             codigoIntermedio.add(temp + " = true;");
             tiposCI.put(temp.toString(),"bool");
             RESULT = temp;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // factor ::= FALSE 
            {
              Object RESULT =null;
		
             String temp = "t" + (++temporalCounter);
             codigoIntermedio.add(temp + " = false;");
             tiposCI.put(temp.toString(),"bool");
             RESULT = temp;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // factor ::= llamada_funcion 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             // Se asume que llamada_funcion ya genera su código intermedio
             RESULT = lf;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // factor ::= accesoArreglo 
            {
              Object RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             String tipoCompleto = getTipoVariable(aa.toString());
             String tipoBase = quitarDimensiones(tipoCompleto);
             String temp = "t" + (++temporalCounter);
             codigoIntermedio.add(temp + " = " + aa.toString() + ";");
             tiposCI.put(temp.toString(),tipoBase);
             RESULT = temp;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             if (!variableExists(nombre.toString())) {
                 report_SemanticError("Variable '" + nombre + "' no ha sido declarada", cur_token);
                 RESULT = "sin_inicializar";
             } else {
                 String temp = "t" + (++temporalCounter);
                 codigoIntermedio.add(temp + " = " + nombre.toString() + ";");
                 tiposCI.put(temp.toString(),getTipoVariable(nombre.toString()));
                 RESULT = temp;
             }
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // factor ::= ESH_IZ exprPrin EZH_DE 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             RESULT = ep;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
